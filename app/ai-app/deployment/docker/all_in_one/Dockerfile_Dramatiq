# Multi-stage build for production Python application

# Stage 1: Build stage
FROM python:3.12-slim as builder

# Set environment variables for build stage
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    build-essential \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install requirements
COPY services/kdcube-ai-app/req.txt requirements.txt
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

#parse an example pdf to preload marker's data
ADD "https://ontheline.trincoll.edu/images/bookdown/sample-local-pdf.pdf" /tmp/marker/sample/sample-local-pdf.pdf
RUN /opt/venv/bin/marker_single --output_dir "/tmp/marker/output" /tmp/marker/sample/sample-local-pdf.pdf

# Stage 2: Production stage
FROM python:3.12-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash appuser

# Copy virtual environment from builder stage
COPY --from=builder --chown=appuser:appuser /opt/venv /opt/venv

# Make venv writable for marker
RUN chown -R appuser:appuser /opt/venv

# Copy Marker cache
COPY --from=builder --chown=appuser:appuser /root/.cache /home/appuser/.cache

# Set work directory
WORKDIR /app

# Copy application code
COPY --chown=appuser:appuser services/kdcube-ai-app/ .

# Switch to non-root user
USER appuser

# Command to run the application
CMD ["python", "kdcube_ai_app/infra/orchestration/app/dramatiq/dramatiq_app_cli.py"]