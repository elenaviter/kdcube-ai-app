services:
  postgres-db:
    container_name: chat-postgres
    image: pgvector/pgvector:pg16
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.postgres
        required: false
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chat-internal

  postgres-setup:
    image: chat-postgres-setup:latest
    container_name: chat-postgres-setup
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_PostgresSetup
    profiles:
      - initial-setup
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.postgres.setup
        required: false
    environment:
      - POSTGRES_HOST=postgres-db
    depends_on:
      - postgres-db
    networks:
      - chat-internal

  redis:
    container_name: chat-redis
    image: redis:latest
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.redis
        required: false
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - chat-internal
    ports:
      - "5445:6379"

  kb:
    image: chat-kb:latest
    container_name: chat-kb
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_KB
    profiles:
      - backend
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.kb
        required: false
    environment:
      - REDIS_URL="redis://redis:6379/0"
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres-db
    volumes:
      - ./kb-storage:/kb-storage
    depends_on:
      - postgres-db
      - redis
    networks:
      - chat-internal

  neo4j:
    image: neo4j:5
    container_name: chat-neo4j
    profiles:
      - backend
    env_file:
      - path: ./.env.backend
        required: false
    # Keep the plugin + procedure config here; credentials & memory come from .env.backend
    environment:
      # Correct v5 keys (server.memory.*)
      NEO4J_AUTH: "${N4J_USER}/${N4J_PASSWORD}"
      NEO4J_server_memory_pagecache_size: ${N4J_PAGECACHE:-1G}
      NEO4J_server_memory_heap_initial__size: ${N4J_HEAP_INITIAL:-512m}
      NEO4J_server_memory_heap_max__size: ${N4J_HEAP_MAX:-1G}

      # APOC plugin
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-plugins:/plugins
      - neo4j-import:/var/lib/neo4j/import
    healthcheck:
      # Uses container env (note the $$ for compose escaping)
      test: ["CMD-SHELL", "cypher-shell -a bolt://localhost:7687 -u $$N4J_USER -p $$N4J_PASSWORD 'RETURN 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
    networks:
      - chat-internal
    # Expose if you want to use Neo4j Browser locally; otherwise you can omit ports
    ports:
      - "7474:7474"   # HTTP (Browser)
      - "7687:7687"   # Bolt

  dramatiq:
    image: chat-dramatiq:latest
    container_name: chat-dramatiq
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_Dramatiq
    profiles:
      - backend
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.dramatiq
        required: false
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres-db
    volumes:
      - ./kb-storage:/kb-storage
    depends_on:
      - postgres-db
      - redis
      - kb
    networks:
      - chat-internal

  chat:
    image: chat-chat:latest
    container_name: chat-chat
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_Chat
    profiles:
      - backend
    env_file:
      - path: ./.env.backend
        required: false
      - path: ./.env.kb
        required: false
    environment:
      - REDIS_URL="redis://redis:6379/0"
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres-db
      - APP_NEO4J_URI=bolt://neo4j:7687
    volumes:
      - ./kb-storage:/kb-storage
      - type: bind
        source: ${SITE_AGENTIC_BUNDLES_ROOT?}  # host root with all bundles
        target: ${AGENTIC_BUNDLES_ROOT?}       # e.g. /bundles inside the container
    depends_on:
      - redis
      - neo4j
    networks:
      - chat-internal

  web-ui:
    image: chat-web-ui:latest
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_UI
      args:
        - NGINX_CONFIG_FILE_PATH=${NGINX_UI_CONFIG_FILE_PATH}
    env_file:
      - path: ./.env.ui
        required: false
    container_name: chat-web-ui
    restart: unless-stopped
    profiles:
      - frontend
    environment:
      - NODE_ENV=production
    networks:
      - chat-internal

  web-proxy:
    image: chat-web-proxy:latest
    build:
      context: ../../..
      dockerfile: deployment/docker/all_in_one/Dockerfile_Proxy
      args:
        - NGINX_CONFIG_FILE_PATH=${NGINX_PROXY_CONFIG_FILE_PATH}
    env_file:
      - path: ./.env.proxy
        required: false
    container_name: chat-web-proxy
    ports:
      - "5173:80"
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/webroot:/var/www/letsencrypt
    profiles:
      - frontend
    networks:
      - chat-external
      - chat-internal

networks:
  chat-external:
    driver: bridge
  chat-internal:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  neo4j-plugins:
  neo4j-import: